// ===== ุงูุฎุงุฏู ุงูุฑุฆูุณู ูููุตุฉ ููุชูุงุจ =====

const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const path = require('path');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
require('dotenv').config();

const app = express();

// ===== ุฅุนุฏุงุฏุงุช ุงูุฃูุงู =====

// Helmet ูุฅุนุฏุงุฏุงุช ุงูุฃูุงู
app.use(helmet({
    crossOriginResourcePolicy: { policy: "cross-origin" },
    contentSecurityPolicy: false // ูููู ุชูุนููู ูู ุงูุฅูุชุงุฌ
}));

// ุชุญุฏูุฏ ูุนุฏู ุงูุทูุจุงุช
const limiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 ุฏูููุฉ
    max: 100, // ุญุฏ 100 ุทูุจ ููู IP
    message: {
        success: false,
        message: 'ุชู ุชุฌุงูุฒ ุนุฏุฏ ุงูุทูุจุงุช ุงููุณููุญ ุจูุง. ูุฑุฌู ุงููุญุงููุฉ ูุงุญูุงู.'
    },
    standardHeaders: true,
    legacyHeaders: false,
});

app.use(limiter);

// ===== middleware ุงูุฃุณุงุณู =====

// CORS
app.use(cors({
    origin: process.env.FRONTEND_URL || 'http://localhost:3000',
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'],
    allowedHeaders: ['Content-Type', 'Authorization']
}));

// ุชุญููู JSON
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// servir ุงููููุงุช ุงูุซุงุจุชุฉ
app.use(express.static(path.join(__dirname, '../frontend')));
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// ===== ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช =====

const connectDB = async () => {
    try {
        const conn = await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/kuttab_platform', {
            useNewUrlParser: true,
            useUnifiedTopology: true,
        });

        console.log(`โ MongoDB ูุชุตู: ${conn.connection.host}`);
        
        // ุฅุนุฏุงุฏ ููุงุฑุณ ููููุงุฐุฌ
        await setupIndexes();
        
    } catch (error) {
        console.error('โ ุฎุทุฃ ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช:', error.message);
        process.exit(1);
    }
};

// ุฅุนุฏุงุฏ ุงูููุงุฑุณ
const setupIndexes = async () => {
    try {
        // ููุงุฑุณ ูููุณุชุฎุฏููู
        await mongoose.connection.collection('users').createIndex({ username: 1 }, { unique: true });
        await mongoose.connection.collection('users').createIndex({ email: 1 }, { unique: true });
        
        // ููุงุฑุณ ูููุชุงุจุงุช
        await mongoose.connection.collection('writings').createIndex({ author: 1, createdAt: -1 });
        await mongoose.connection.collection('writings').createIndex({ category: 1 });
        
        // ููุงุฑุณ ููููุดูุฑุงุช
        await mongoose.connection.collection('posts').createIndex({ author: 1, createdAt: -1 });
        await mongoose.connection.collection('posts').createIndex({ 'poll': 1 });
        
        console.log('โ ุชู ุฅุนุฏุงุฏ ููุงุฑุณ ูุงุนุฏุฉ ุงูุจูุงูุงุช');
    } catch (error) {
        console.error('โ ุฎุทุฃ ูู ุฅุนุฏุงุฏ ุงูููุงุฑุณ:', error);
    }
};

// ===== ูุณุงุฑุงุช API =====

// ูุณุงุฑุงุช ุงููุตุงุฏูุฉ
app.use('/api/auth', require('./routes/auth'));

// ูุณุงุฑุงุช ุงููุชุงุจุงุช
app.use('/api/writings', require('./routes/writings'));

// ูุณุงุฑุงุช ุงููุนุฑุถ
app.use('/api/gallery', require('./routes/gallery'));

// ูุณุงุฑุงุช ุงูููุดูุฑุงุช
app.use('/api/posts', require('./routes/posts'));

// ูุณุงุฑุงุช ุงูุงุณุชูุชุงุกุงุช
app.use('/api/polls', require('./routes/polls'));

// ูุณุงุฑุงุช ุงูุฅุฏุงุฑุฉ
app.use('/api/admin', require('./routes/admin'));

// ูุณุงุฑ ุฑูุน ุงููููุงุช
app.use('/api/upload', require('./routes/upload'));

// ===== servir ูุงุฌูุฉ ุงููุณุชุฎุฏู =====

app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, '../frontend/index.html'));
});

// ===== ูุนุงูุฌุฉ ุงูุฃุฎุทุงุก =====

// ูุนุงูุฌ ููุฑูุงุจุท ุบูุฑ ููุฌูุฏุฉ
app.use((req, res) => {
    res.status(404).json({
        success: false,
        message: 'ุงูุฑุงุจุท ุบูุฑ ููุฌูุฏ'
    });
});

// ูุนุงูุฌ ุงูุฃุฎุทุงุก ุงูุนุงู
app.use((err, req, res, next) => {
    console.error('๐ฅ ุฎุทุฃ ูู ุงูุฎุงุฏู:', err.stack);

    // ุฎุทุฃ ูู ุงูุชุญูู ูู ุงูุตุญุฉ
    if (err.name === 'ValidationError') {
        const messages = Object.values(err.errors).map(val => val.message);
        return res.status(400).json({
            success: false,
            message: 'ุจูุงูุงุช ุบูุฑ ุตุงูุญุฉ',
            errors: messages
        });
    }

    // ุฎุทุฃ ูู ุชูุฑุงุฑ ุงูุจูุงูุงุช
    if (err.code === 11000) {
        const field = Object.keys(err.keyValue)[0];
        return res.status(400).json({
            success: false,
            message: `${field} ููุฌูุฏ ูุณุจูุงู`
        });
    }

    // ุฎุทุฃ ูู JWT
    if (err.name === 'JsonWebTokenError') {
        return res.status(401).json({
            success: false,
            message: 'Token ุบูุฑ ุตุงูุญ'
        });
    }

    // ุฎุทุฃ ูู ุงูุชูุงุก ุตูุงุญูุฉ JWT
    if (err.name === 'TokenExpiredError') {
        return res.status(401).json({
            success: false,
            message: 'ุงูุชูุช ุตูุงุญูุฉ Token'
        });
    }

    // ุงูุฎุทุฃ ุงูุงูุชุฑุงุถู
    res.status(err.status || 500).json({
        success: false,
        message: process.env.NODE_ENV === 'development' ? err.message : 'ุญุฏุซ ุฎุทุฃ ูู ุงูุฎุงุฏู',
        ...(process.env.NODE_ENV === 'development' && { stack: err.stack })
    });
});

// ===== ุชุดุบูู ุงูุฎุงุฏู =====

const PORT = process.env.PORT || 5000;

const startServer = async () => {
    try {
        // ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุฃููุงู
        await connectDB();
        
        // ุซู ุชุดุบูู ุงูุฎุงุฏู
        app.listen(PORT, () => {
            console.log(`๐ ุงูุฎุงุฏู ูุนูู ุนูู ุงููููุฐ ${PORT}`);
            console.log(`๐ ุงูุจูุฆุฉ: ${process.env.NODE_ENV || 'development'}`);
            console.log(`๐ง ุนููุงู API: http://localhost:${PORT}/api`);
            console.log(`๐จ ูุงุฌูุฉ ุงููุณุชุฎุฏู: http://localhost:${PORT}`);
            
            // ูุนูููุงุช ุฅุถุงููุฉ ูู ูุถุน ุงูุชุทููุฑ
            if (process.env.NODE_ENV === 'development') {
                console.log('\n๐ ูุณุงุฑุงุช API ุงููุชุงุญุฉ:');
                console.log('   ๐ /api/auth - ุงููุตุงุฏูุฉ ูุงููุณุชุฎุฏููู');
                console.log('   ๐ /api/writings - ุฅุฏุงุฑุฉ ุงููุชุงุจุงุช');
                console.log('   ๐ผ๏ธ /api/gallery - ูุนุฑุถ ุงูุฃุนูุงู');
                console.log('   ๐ฌ /api/posts - ุงูููุดูุฑุงุช ุงูุงุฌุชูุงุนูุฉ');
                console.log('   ๐ /api/polls - ุงูุงุณุชูุชุงุกุงุช');
                console.log('   ๐ /api/admin - ููุญุฉ ุงูุฅุฏุงุฑุฉ');
                console.log('   ๐ค /api/upload - ุฑูุน ุงููููุงุช');
            }
        });
    } catch (error) {
        console.error('โ ูุดู ูู ุชุดุบูู ุงูุฎุงุฏู:', error);
        process.exit(1);
    }
};

// ูุนุงูุฌ ูุฅุบูุงู ุงูุฎุงุฏู ุจุดูู ุฃููู
process.on('SIGINT', async () => {
    console.log('\n๐ป ูุชู ุฅููุงู ุงูุฎุงุฏู...');
    await mongoose.connection.close();
    console.log('โ ุชู ุฅุบูุงู ุงุชุตุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช');
    process.exit(0);
});

process.on('SIGTERM', async () => {
    console.log('\n๐ป ูุชู ุฅููุงู ุงูุฎุงุฏู...');
    await mongoose.connection.close();
    console.log('โ ุชู ุฅุบูุงู ุงุชุตุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช');
    process.exit(0);
});

// ุจุฏุก ุงูุฎุงุฏู
startServer();

module.exports = app;